<!DOCTYPE html>

<div id="graph" style="position:absolute;top:200px;left:0; float:left;"></div>
<script type="text/javascript" src="javascript/jquery-1.3.2.min.js"></script>
<script src="https://d3js.org/d3.v4.min.js"></script>

<script>
  $.getJSON('<%= params[:mid] %>.json', function(json) {doStuff(json);});

  //next step: preiodically update

 
  function doStuff(json) {
    var sample = json;

     sample = sample.map(function(o) {
      return {date: new Date(o["timestamp"]),price: o["price"]};
    }
      );

    console.log(sample);


    sample.sort(function(a,b) {
      if (a.date>b.date) {return 1;}
      else if (b.date>a.date) {return -1;}
      else {return 0;}
      });

    sample[sample.length] = {
      date: new Date(),
      price: sample[sample.length - 1].price
    };


    var prices = sample.map(function(d) {
      return Math.abs(d.price);
    });

    var dates = sample.map(function(d) {
      return d.date;
    });

    var bisectDate = d3.bisector(function(d) {
      return d.date;
    }).left;
    var formatValue = d3.format(",.2f");
    var formatCurrency = function(d) {
      return "$" + formatValue(d);
    };

    var w = 400,
      h = 200,
      m = 20;

    var timeScale = d3.scaleTime()
      .domain([d3.min(dates), new Date()])
      .range([0, w]),
      linScale = d3.scaleLinear()
      .domain([1, 0])
      .range([0, h]);

    var line = d3.line()
          .x(function(d) {
            return timeScale(d.date);
          })
          .y(function(d) {
            return linScale(Math.abs(d.price));
          }),
          area = d3.area()
          .x(function(d) {
            return timeScale(d.date);
          })
          .y1(function(d) {
            return linScale(Math.abs(d.price));
          })
          .y0(function(d) {
            return h;
          });

    var graph = d3.select("#graph").append("svg:svg")
      .attr("width", w + 4 * m)
      .attr("height", h + 2 * m)
      .append("svg:g")
      .attr("transform", "translate(" + 2*m + "," + m + ")");

    var yAxis = d3.axisLeft(linScale)
      .tickSize(3)
      .ticks(5)
      .tickFormat(formatCurrency);

    var xAxis = d3.axisBottom(timeScale)
      .tickSize(-h)
      .tickArguments([d3.timeDay.every(1)])
      .tickFormat(d3.timeFormat("%m/%d"));

    graph.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + h + ")")
      .call(xAxis);
      
    graph.append("g")
      .attr("class", "y axis")
      .attr("transform", "translate(0," + 0 + ")")
      .call(yAxis);

    graph.datum(sample);
    var pathArea = graph.append("svg:path").attr("class", "area").attr("d", area).transition("d");
    var pathLine = graph.append("svg:path").attr("class", "line").attr("d", line).transition("d");



    var focus = graph.append("g")
      .attr("class", "focus")
      .style("display", "none");

    focus.append("circle")
      .attr("r", 4.5);


    focus.append("text")
      .attr("x", 9)
      .attr("y", -10)
      .attr("dy", ".35em");

    function mousemove() {
      var x0 = timeScale.invert(d3.mouse(this)[0]),
        i = bisectDate(sample, x0, 1),
        d0 = sample[i - 1],
        d1 = sample[i],
        d = x0 - d0.date > d1.date - x0 ? d1 : d0;
      focus.transition().duration(50).attr("transform", "translate(" + timeScale(d.date) + "," + linScale(d.price) + ")");
      focus.select("text").text(formatCurrency(d.price));
    }

    function zoom() {
      var x0 = timeScale.invert(d3.mouse(this)[0]),
      i = bisectDate(sample, x0, 1);
      d0 = sample[i - 1],
      d1 = sample[i],
      d = x0 - d0.date > d1.date - x0 ? d1 : d0;
      timeScale.domain([new Date(d.date.getFullYear(), d.date.getMonth(), d.date.getDay(),0), new Date(d.date.getFullYear(), d.date.getMonth(), d.date.getDay()+1,0)]);
      linScale.domain([100,0]);
      pathArea.attr("d", area);
      pathLine.attr("d", line);
    }

    graph.append("rect")
      .attr("class", "overlay")
      .attr("width", w)
      .attr("height", h)
      .on("mouseover", function() {
        focus.style("display", null);
      })
      .on("mouseout", function() {
        focus.style("display", "none");
      })
      .on("mousemove", mousemove)
      .on("click",zoom); // SKETCHY SKETCHY
  }
</script>
 
<style>
#graph {
  background-color: white;
}

  svg {
  font: 10px sans-serif;
}

path.line {
  fill: none;
  stroke: black;
  stroke-width: 1.5px;
}

path.area {
  fill: greenyellow;
  opacity: 0.2;
}

.axis {
  shape-rendering: crispEdges;
}

.x.axis line {
  stroke:steelblue;
  stroke-opacity: .3;
}

.x.axis .minor {
  stroke-opacity: .5;
}

.x.axis path {
}

.y.axis line,
.y.axis path {
  fill: none;
  stroke: #000;
}

.overlay {
  fill: none;
  pointer-events: all;
}

.focus circle {
  fill: none;
  stroke: steelblue;
}

</style>